<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OVER THE FULLERENESHIFT</title>
  <subtitle>Personal website.</subtitle>
  <link href="http://shandriy.github.io/atom.xml" rel="self"/>
  <link href="http://shandriy.github.io"/>
  <updated></updated>
  <author>
    <name>Shandriy</name>
  </author>
  <id>http://shandriy.github.io</id>
  <entry>
    <content type="text/html">
<h2 id="the-most-cross-compatible-font-stacks">17/11/2024 - The Most Cross-Compatible Font Stacks</h2> <p>Cross compatibility is very important to me; it means consistency, and consistency and permanence are some of the most important things to me in web development, and overall in life.</p> <h3 id="sans-serif-and-serif">Sans-Serif and Serif</h3> <p>Loading fonts sucks - they loads slowly and some older browsers don't support it. I was looking for what default system fonts are most cross-compatible and came across <a href="https://www.ctrl.blog/entry/font-stack-text.html">this</a> wonderful article. I recommend reading it first. According to it, the most cross-compatible font stack for sans-serif fonts is <code>'Helvetica Neue', 'Arial Nova', Helvetica, Arial, sans-serif</code> and for serif fonts, <code>Times, 'Times New Roman', serif</code>. While this is a great starting point, this isn't <em>exactly</em> what I'm looking for.</p> <p>When looking for a cross-compatible font stack, I'm looking for one where the fonts are metrically compatible. My first problem with the font stacks given in the Aleksandersen's article is that <a href="https://creativepro.com/helvetica-vs-neue-helvetica-same-but-different/">Helvetica Neue is not metrically compatible with Helvetica</a>. While this doesn't mean something is wrong with using Helvetica Neue to replace Helvetica, it's not exactly what I'm looking for. So, our new font stack for sans-serif fonts is: <code>Helvetica, Arial, sans-serif</code>.</p> <p>According to Aleksandersen's article, it's better to <em>first</em> put Times New Roman, then Times in the font stack because Nimbus Roman is a closer match than Liberation Serif. However, looking at the <a href="https://www.ctrl.blog/entry/font-stack-text.html#:~:text=Serif%20font%20name%20substitutions%20%28Latin%20scripts%29">charts provided</a>, Times New Roman is better substituted, and Nimbus Roman isn't metrically compatible with Times, which is what I'm looking for. A solution for this is simply making the font stack like this: <code>"Liberation Serif", "Times New Roman", Times, serif</code>. The same goes for the sans-serif fonts; <code>"Liberation Sans", Arial, Helvetica, sans-serif</code>.</p> <h3 id="font-ligatures">Font Ligatures</h3> <p>Another issue with all of this is font ligatures - many metrically compatible fonts don't have the same support for ligatures, but as it turns out, it's possible to disable font ligatures with CSS. Is it worth it? To most people, no, but for my personal needs, yes. Font ligatures <a href="https://stackoverflow.com/questions/39504775/disabling-font-ligatures-css-letter-combining">can be disabled in two ways</a>. Using <code>font-feature-settings: "liga" 0</code> or <code>font-variant-ligatures: none</code>.</p> <p>There are a few problems with these options however; the first is that it's unsupported by older browsers, but there isn't anything we can do about that. However more importantly, <code>font-feature-settings: "liga" 0</code> only disables common ligatures; <code>font-feature-settings: "liga" 0</code> is the same as <code>font-variant-ligatures: no-common-ligatures</code> but not <code>font-variant-ligatures: none</code>. So of course <code>font-variant-ligatures</code> is the better option? Kind of. Official support for <code>font-variant-ligatures</code> came before <code>font-feature-settings</code> in most browsers, but <code>font-feature-settings</code> came with vendored prefix support before <code>font-variant-ligatures</code> did for most browsers. The solution? Use both, and with all vendor prefixes.</p> <pre><code>font-feature-settings: &quot;liga&quot; 0; -moz-font-feature-settings: &quot;liga=0&quot;; -moz-font-feature-settings: &quot;liga&quot; 0; -webkit-font-feature-settings: &quot;liga&quot; 0; font-variant-ligatures: none; -webkit-font-variant-ligatures: none;</code></pre> <p>That's a lot just to disable font ligatures, but in my eyes it's worth it. Older versions of <code>font-feature-settings</code> on FireFox had a different syntax, which is why the line <code>-moz-font-feature-settings: "liga=0";</code> is needed.</p> <h3 id="remaining-fonts">Remaining Fonts</h3> <p>Is that it? No. The one final thing not addressed is the most cross-compatible monospaced font. This isn't really complicated, and follows the same pattern as all the other fonts. Using the <a href="https://wiki.archlinux.org/title/Metric-compatible_fonts">archlinux wiki</a>, I got the font stack <code>"Liberation Mono", "Courier New", Courier, monospace</code>.</p> <p>The generic values for <code>font-family</code> also include <code>system-ui</code>, <code>cursive</code>, <code>fantasy</code>, and <code>math</code>. However, <code>system-ui</code> is dependant on your operating system, <code>cursive</code> defaults to Comic Sans on Windows, which isn't even cursive and more importantly I doubt anyone has made any metrically compatible fonts to it that <em>are</em> cursive. I can't seem to find what the default font for <code>cursive</code> is on MacOS anyways, so I'm just not gonna do it. <code>fantasy</code> on Windows default to Arial for some reason, and <code>math</code> to Times New Roman, so it makes sense to just support PostScript Level 1 core fonts, since those are the only ones standardized. Technically Symbol is also included in PostScript Level 1 but that can't really be substituted.</p> <h3 id="tldr">TL;DR</h3> <div class="sourceCode" id="cb2"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="fu">.serif</span> {</span> <span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a> <span class="kw">font-feature-settings</span>: <span class="st">&quot;liga&quot;</span> <span class="dv">0</span><span class="op">;</span></span> <span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a> -moz-font-feature-settings: <span class="st">&quot;liga=0&quot;</span><span class="op">;</span></span> <span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a> -moz-font-feature-settings: <span class="st">&quot;liga&quot;</span> <span class="dv">0</span><span class="op">;</span></span> <span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a> -webkit-font-feature-settings: <span class="st">&quot;liga&quot;</span> <span class="dv">0</span><span class="op">;</span></span> <span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a> <span class="kw">font-variant-ligatures</span>: <span class="dv">none</span><span class="op">;</span></span> <span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a> -webkit-font-variant-ligatures: <span class="dv">none</span><span class="op">;</span></span> <span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a> <span class="kw">font-stretch</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a> <span class="kw">font-variant-caps</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a> <span class="kw">font-variant-numeric</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a> <span class="kw">font-variant-position</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a> <span class="kw">font-variant-alternates</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a> <span class="kw">font-variation-settings</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a> <span class="kw">font-synthesis</span>: style <span class="dv">small-caps</span> weight position<span class="op">;</span></span> <span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a> <span class="kw">font-family</span>: <span class="st">&quot;Liberation Serif&quot;</span><span class="op">,</span> <span class="st">&quot;Times New Roman&quot;</span><span class="op">,</span> Times<span class="op">,</span> <span class="dv">serif</span><span class="op">;</span></span> <span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>}</span> <span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a><span class="fu">.sans-serif</span> {</span> <span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a> <span class="kw">font-feature-settings</span>: <span class="st">&quot;liga&quot;</span> <span class="dv">0</span><span class="op">;</span></span> <span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a> -moz-font-feature-settings: <span class="st">&quot;liga=0&quot;</span><span class="op">;</span></span> <span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a> -moz-font-feature-settings: <span class="st">&quot;liga&quot;</span> <span class="dv">0</span><span class="op">;</span></span> <span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a> -webkit-font-feature-settings: <span class="st">&quot;liga&quot;</span> <span class="dv">0</span><span class="op">;</span></span> <span id="cb2-22"><a href="#cb2-22" aria-hidden="true"></a> <span class="kw">font-variant-ligatures</span>: <span class="dv">none</span><span class="op">;</span></span> <span id="cb2-23"><a href="#cb2-23" aria-hidden="true"></a> -webkit-font-variant-ligatures: <span class="dv">none</span><span class="op">;</span></span> <span id="cb2-24"><a href="#cb2-24" aria-hidden="true"></a> <span class="kw">font-stretch</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-25"><a href="#cb2-25" aria-hidden="true"></a> <span class="kw">font-variant-caps</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-26"><a href="#cb2-26" aria-hidden="true"></a> <span class="kw">font-variant-numeric</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-27"><a href="#cb2-27" aria-hidden="true"></a> <span class="kw">font-variant-position</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-28"><a href="#cb2-28" aria-hidden="true"></a> <span class="kw">font-variant-alternates</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-29"><a href="#cb2-29" aria-hidden="true"></a> <span class="kw">font-variation-settings</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-30"><a href="#cb2-30" aria-hidden="true"></a> <span class="kw">font-synthesis</span>: style <span class="dv">small-caps</span> weight position<span class="op">;</span></span> <span id="cb2-31"><a href="#cb2-31" aria-hidden="true"></a> <span class="kw">font-family</span>: <span class="st">&quot;Liberation Sans&quot;</span><span class="op">,</span> Arial<span class="op">,</span> Helvetica<span class="op">,</span> <span class="dv">sans-serif</span><span class="op">;</span></span> <span id="cb2-32"><a href="#cb2-32" aria-hidden="true"></a>}</span> <span id="cb2-33"><a href="#cb2-33" aria-hidden="true"></a><span class="fu">.monospace</span> {</span> <span id="cb2-34"><a href="#cb2-34" aria-hidden="true"></a> <span class="kw">font-feature-settings</span>: <span class="st">&quot;liga&quot;</span> <span class="dv">0</span><span class="op">;</span></span> <span id="cb2-35"><a href="#cb2-35" aria-hidden="true"></a> -moz-font-feature-settings: <span class="st">&quot;liga=0&quot;</span><span class="op">;</span></span> <span id="cb2-36"><a href="#cb2-36" aria-hidden="true"></a> -moz-font-feature-settings: <span class="st">&quot;liga&quot;</span> <span class="dv">0</span><span class="op">;</span></span> <span id="cb2-37"><a href="#cb2-37" aria-hidden="true"></a> -webkit-font-feature-settings: <span class="st">&quot;liga&quot;</span> <span class="dv">0</span><span class="op">;</span></span> <span id="cb2-38"><a href="#cb2-38" aria-hidden="true"></a> <span class="kw">font-variant-ligatures</span>: <span class="dv">none</span><span class="op">;</span></span> <span id="cb2-39"><a href="#cb2-39" aria-hidden="true"></a> -webkit-font-variant-ligatures: <span class="dv">none</span><span class="op">;</span></span> <span id="cb2-40"><a href="#cb2-40" aria-hidden="true"></a> <span class="kw">font-stretch</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-41"><a href="#cb2-41" aria-hidden="true"></a> <span class="kw">font-variant-caps</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-42"><a href="#cb2-42" aria-hidden="true"></a> <span class="kw">font-variant-numeric</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-43"><a href="#cb2-43" aria-hidden="true"></a> <span class="kw">font-variant-position</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-44"><a href="#cb2-44" aria-hidden="true"></a> <span class="kw">font-variant-alternates</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-45"><a href="#cb2-45" aria-hidden="true"></a> <span class="kw">font-variation-settings</span>: <span class="dv">normal</span><span class="op">;</span></span> <span id="cb2-46"><a href="#cb2-46" aria-hidden="true"></a> <span class="kw">font-synthesis</span>: style <span class="dv">small-caps</span> weight position<span class="op">;</span></span> <span id="cb2-47"><a href="#cb2-47" aria-hidden="true"></a> <span class="kw">font-family</span>: <span class="st">&quot;Liberation Mono&quot;</span><span class="op">,</span> <span class="st">&quot;Courier New&quot;</span><span class="op">,</span> Courier<span class="op">,</span> <span class="dv">monospace</span><span class="op">;</span></span> <span id="cb2-48"><a href="#cb2-48" aria-hidden="true"></a>}</span></code></pre></div> <p>It's probably better to use mixins and a CSS preprocessor rather than classes, though. I also added a few more modern features to make sure it's entirely the same, although I'm not entirely certain if they have any effect on the specific fonts in this context. You can probably remove everything from <code>font-stretch: normal;</code> to <code>font-synthesis: style small-caps weight position;</code> without losing much.</p> <p>Basically all modern browsers allow you to override all website fonts so this isn't really a guarantee of cross-compatibility, but nothing can really be done about that. It is what it is. Basically the only solution to that is using images for fonts but that's terrible for accessibility and performance too - unless you're using HTML5 canvas, where there's probably not a lot of text anyways. I might experiment with that later, especially since old Chrome versions don't support writing text directly to canvas.</p> <p>Thank you for reading!</p>
    </content>
<title>The Most Cross-Compatible Font Stacks</title>
    <link href="https://shandriy.github.io/./notes/2024/11/17.htm"/>
    <id>./notes/2024/11/17.htm</id>
    <updated></updated>
    <summary></summary>
  </entry>
  <entry>
    <content type="text/html">
<h2 id="the-limits-of-cross-and-backwards-compatibility">23/11/2024 - The Limits of Cross and Backwards Compatibility</h2> <div style="color:#888"> <p>Note: Keep in mind that I don't have much experience with a lot of topics I'm gonna mention here, so <a href="https://enty.atabook.org">correct me</a> if I make any mistakes. Thank you!</p> </div> <h3 id="what-makes-cross-compatibility-hard">What Makes Cross-Compatibility Hard</h3> <p>As I've mentioned in my <a href="/notes/2024/11/17.htm">previous blog post</a>, home page, and probably more pages as time goes on, I really, <em>really</em>, care about backwards-compatibility and cross-compatibility.</p> <p>The only problem is, full backwards and cross-compatibility is impossible. This is probably obvious but I'm gonna rant about it nevertheless just to show exactly why this is bothering me so much.</p> <p>When most people think of cross-compatibility, they think of something like an app that works on Mac, Linux, and Windows - maybe mobile platforms too - iOS and Android. There are a few problems with this though:</p> <ol type="1"> <li>Versions for Mac, Linux, and Windows often need to be slightly modified to compile properly or run as expected.</li> <li>An app made for desktop and mobile is often just two different apps entirely - I want cross-compatibility as in the same app running everywhere; this just isn't the same, and requires a lot of work.</li> <li>APIs: Different OSs will have different APIs, which makes UI, graphics, and many other things a pain to make cross-compatible; there a few solutions to rendering graphics specifically: <ul> <li>To make the app render the same everywhere, abstract away system calls as much as possible; no more system UI, no more system fonts, etc. Everything is entirely controlled by the app or library, at the cost of making everything look slightly odd everywhere and likely slower performance and more bugs - I believe this is what Java does (or used to do).</li> <li>Not making the app render the same everywhere - just use system APIs, fonts, UIs, etc. It'll look close enough. Of course this provides a better experience on every platform in general, but when I say cross-compatibility - I want <em>everything</em> to be as similar as possible.</li> <li>To make the app render the same everywhere, just use WebView/Chromium. From my experience, this seems to be the most common solution now in 2024. But this has heavy performance costs - only write JavaScript if you're making a website - and on that note, why not make a website instead?</li> </ul></li> </ol> <h3 id="backwards-compatibility-and-the-web">Backwards-Compatibility and the Web</h3> <p>The web is convenient in that almost every modern device has a built-in browser, and browsers are designed to work as similarly as possible everywhere. This is basically perfect for what I want, especially since making a website means no downloads are required - you can make things that work on iOS without having to jailbreak your device or use TestFlight or the App Store. Neither do you have to deal with compatibility for every Linux distribution ever.</p> <p>Developing websites you run into a different problem though; backwards-compatibility.</p> <p>Of course backwards-compatibility is also problematic on compiled platforms outside of the web, but much less so. Installing older versions of Windows or any other OS means - well, installing an OS. Older devices might be limited by hardware, but finding and buying an old iPhone is significantly more difficult than installing an old browser.</p> <p>Notice the little text on the footer of this site? "Tested on Firefox 132.0.1 64-bit Windows and Chrome 1.0.154.59?" Yes, I actually test to make sure this site works on the first version of Chrome. It wasn't hard to set up. I just downloaded it off <a href="https://archive.org/details/chrome1.0">the Internet Archive</a> and that's it. Using an old, non-compatible browser is much, <em>much</em>, easier than using an outdated device or hardware. And by extent, this means backwards-compatibility is a much bigger problem to face on the web.</p> <div style="color:#888"> <p>Sidenote: I don't know about any Linux distributions or Mac, but Windows doesn't even maintain backwards compatibility with lots of old apps, so making an app <em>really</em> backwards-compatible without rewriting it is impossible anyways, for Windows at least.</p> </div> <h3 id="what-makes-backwards-compatibility-hard">What Makes Backwards-Compatibility Hard</h3> <p>Browsers have evolved a lot, and maintaining backwards-compatibility with old browsers is made easy by projects like <a href="https://github.com/zloirock/core-js">core-js</a> and <a href="https://babeljs.io/">babel</a> - kind of. It all depends on how you define "old", as these mostly don't support IE (To clarify, I don't aim to support Internet Explorer either, but I could if I wanted to - these projects will <em>never</em> add more support to IE, because why would they? A more important thing to me though is that the oldest version of Chrome supported by Babel is 3; I make everything compatible with Chrome 1), can't polyfill HTML elements, and obviously can't and don't polyfill features like WebGL. This is especially important to me since 3d graphics in Chrome 1 is something I've been trying to achieve for a while, and it has to be done with <code>CanvasRenderingContext2d</code>.</p> <p>Despite all of the efforts to achieve compatibility between all browsers, it's still not perfect for all my needs. It also really bothers me that I'm losing control over the exact output of programs like Babel, but that's a separate topic.</p> <p>This means code compatible across every version of every browser has to be written manually - a pain, but worth it, for me.</p> <p>This is gonna sound ridiculous, but no matter how hard you try, <strong>full compatibility across all browsers will always be impossible</strong>, and for one very simple reason - anyone can make a new browser. It might not be complete or follow every standard, but it's a browser, and that's exactly the problem. All of the solutions you can come up with will only work on spec-compliant browsers or ones with known errors and bugs. More obscure browsers (unlikely), and <a href="https://en.wikipedia.org/wiki/ViolaWWW"><em>really</em> old browsers</a> won't support JavaScript correctly or entirely.</p> <p>Does this all seem absurd and stupid? That's because it is. No one will ever use any website I make on Chrome 1 over than myself. I'm not doing this for any actual use; I'm doing this because I want everything to feel complete - I want it to be perfect.</p> <h3 id="going-past-browsers">Going Past Browsers</h3> <p>Ok, browsers aren't perfect for this. Are there any other options? Yes. Assembly.</p> <p>The most common CPU architecture is <a href="https://www.windriver.com/solutions/learning/leading-processor-architectures">x64/x86</a>. Since x64 is compatible with x86, x86 assembly is basically perfect. It doesn't matter what your OS is, as long as you have an x86 or x64 CPU, the program can be run.</p> <p>The problem with this is it's leaving a lot up to the BIOS.</p> <p>The second, much bigger problem is that writing anything actually good in assembly is ridiculously hard.</p> <p>Oh, and if you're thinking "What about ARM? x86 assembly isn't fully cross-compatible," you're right. The first two problems I can ignore and go past, but there is no way to write assembly that's compatible between ARM and x86. Not only that, although ARM and x86 are generally the most used, theoretically something could be running on a completely different architecture - so even if I manage to get some sort of compatibility between ARM and x86, maybe a CLR or VM of sorts - this still won't be perfectly compatible with everything.</p> <p>Admittedly, devices not using x64, x86, or ARM probably aren't capable of running a browser or any modern OS in the first place, which I never mentioned in the previous sections, but that's fine. If you can't open a browser, how will you even be able to check that a website renders properly or not?</p> <p>What next? Make my own hardware? No thanks. Not only is that really difficult, my goal is cross-compatibility, not consistency on a single platform that no one but me has access to.</p> <p>x86 assembly can be emulated on other devices using projects like <a href="https://www.qemu.org/">QEMU</a> but it doesn't work on web, which means excluding devices it can't be compiled to, like iOS. I could try to write an emulator for x86 in JavaScript for maximum compatibility, but even if I was able to do that, reading binary files is basically impossible in old browsers and it would be painfully slow. And as for QEMU, it means the user has to install an external program, which isn't really the kind of cross-compatibility I'm looking for - It's not cross compatible if you have to run it on an emulator or VM that doesn't come with the app itself.</p> <h3 id="conclusion">Conclusion</h3> <p>Perfect cross-compatibility and backwards-compatibility is actually impossible. This sucks for me but there's literally nothing I can do.</p> <p>I could try implementing a VM that works on web and all major OSs, but that would be difficult to do in a performant way and would lose some of the lower level control I could have, especially in a browser where the lowest level is still human-readable - JavaScript.</p> <p>Oh well. I'll just have to deal with it and try to get as close to full backwards and cross-compatibility as I possibly can.</p>
    </content>
<title>The Limits of Cross and Backwards Compatibility</title>
    <link href="https://shandriy.github.io/./notes/2024/11/23.htm"/>
    <id>./notes/2024/11/23.htm</id>
    <updated></updated>
    <summary></summary>
  </entry>
</feed>